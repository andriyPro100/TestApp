{"version":3,"sources":["components/Button.tsx","img/person-icon.png","components/Table/UpdateClientForm.tsx","components/Table/UpdateModalWrapper.tsx","components/Table/TableItem.tsx","components/Table/TableWrapper.tsx","components/AddClient/AddClientForm.tsx","components/AddClient/ModalWrapper.tsx","components/AddClient/AddClientWrapper.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","text","color","onClick","type","className","UpdateClientForm","values","openModal","setOpenModal","useForm","defaultValues","firstName","lastName","phone","avatarUrl","register","handleSubmit","errors","useState","inputs","setInputs","refetch","useQuery","id","a","request","endpoint","gql","data","useUpdateClient","refetchOnWindowFocus","enabled","client","useQueryClient","onSubmit","input","then","invalidateQueries","name","ref","required","UpdateModalWrapper","show","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","aria-hidden","role","aria-modal","aria-labelledby","TableItem","alt","src","no_ava","GET_CLIENT","TableWrapper","getClients","status","map","item","AddClientForm","useAddClient","ModalWrapper","AddClientWrapper","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","QueryClient","ReactDOM","render","QueryClientProvider","document","getElementById"],"mappings":"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","file":"static/js/main.c2ce02ac.chunk.js","sourcesContent":["import * as React from 'react'\r\n\r\nexport interface ButtonProps {\r\n    text: string\r\n    color: string\r\n    onClick?: React.MouseEventHandler<HTMLButtonElement>\r\n    type?: \"submit\"|\"button\"\r\n}\r\n\r\nexport default function Button ({text, color, onClick, type}:ButtonProps) {\r\n    return (\r\n        <button type={type} className={color + \" m-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white hover:bg-indigo-700 focus:outline-none focus:ring-0 focus:ring-offset-0 focus:ring-indigo-500\"}\r\n                onClick={onClick}>\r\n            {text}</button>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/person-icon.12ea4f36.png\";","import React, {useState} from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Button from \"../Button\";\r\nimport {ModalProps} from \"./UpdateModalWrapper\";\r\nimport request, {gql} from \"graphql-request\";\r\nimport {endpoint} from \"../../index\"\r\nimport {useQuery, useQueryClient} from \"react-query\";\r\n\r\ntype Inputs = {\r\n    firstName: string,\r\n    lastName: string,\r\n    phone?: string,\r\n    avatarUrl?: string,\r\n};\r\n\r\nfunction useUpdateClient(inputs:any, id: string) {\r\n    return ( async () => {\r\n            const {data} = await request(\r\n                endpoint, gql\r\n                    `mutation {\r\n                      updateClient(\r\n                        id: \"${id}\"\r\n                        firstName: \"${inputs.firstName}\"\r\n                        lastName: \"${inputs.lastName}\"\r\n                        phone: \"${inputs.phone}\"\r\n                        avatarUrl: \"${inputs.avatarUrl}\"\r\n                      ){\r\n                        id\r\n                      }\r\n                    }`)\r\n            return data\r\n        }\r\n\r\n    )\r\n}\r\n\r\nexport default function UpdateClientForm({values, openModal, setOpenModal}: ModalProps) {\r\n    const { register, handleSubmit, errors } = useForm<Inputs>({\r\n        defaultValues: {\r\n            firstName: values.firstName,\r\n            lastName: values.lastName,\r\n            phone: values.phone,\r\n            avatarUrl: values.avatarUrl\r\n        }\r\n    });\r\n    const [inputs, setInputs] = useState({})\r\n    const {refetch } = useQuery([\"updateClient\"], useUpdateClient(inputs, values.id), {\r\n        refetchOnWindowFocus: false,\r\n        enabled: false\r\n    })\r\n    const client = useQueryClient()\r\n    const onSubmit = (input: React.FormEvent) => {\r\n        setInputs(input)\r\n        setOpenModal(!openModal)\r\n        refetch().then(() => client.invalidateQueries(\"g\"))\r\n    }\r\n\r\n    return (\r\n        <form className=\"flex flex-col\" onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <span>First name:</span>\r\n            <input className=\"border-2\" name=\"firstName\" ref={register({ required: true })} />\r\n\r\n            <span>Last name:</span>\r\n            <input className=\"border-2\" name=\"lastName\" ref={register({ required: true })} />\r\n\r\n            <span>Phone:</span>\r\n            <input className=\"border-2\" name=\"phone\" ref={register} />\r\n\r\n            <span>Image url:</span>\r\n            <input className=\"border-2\" name=\"avatarUrl\" ref={register} />\r\n\r\n            {errors.firstName && <span>Field 'First name' is required</span>}\r\n            {errors.lastName && <span>Field 'Last name' is required</span>}\r\n\r\n            <div className=\"flex flex-wrap content-between\">\r\n                <Button type=\"submit\" text=\"Edit\" color=\"bg-blue-500\"/>\r\n                <Button type=\"button\" text=\"Cancel\" color=\"bg-red-500\" onClick={() => setOpenModal(!openModal)}/>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n","import React, {Dispatch, SetStateAction} from 'react'\r\nimport {Transition} from '@headlessui/react'\r\nimport UpdateClientForm from \"./UpdateClientForm\";\r\n\r\n\r\nexport interface ModalProps {\r\n    values: any\r\n    openModal: boolean;\r\n    setOpenModal: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\n\r\nexport default function UpdateModalWrapper({values, openModal, setOpenModal}: ModalProps) {\r\n\r\n    return (\r\n        <div className=\"relative ...\">\r\n            <Transition\r\n                show={openModal}\r\n                enter=\"transition ease-out duration-100 transform\"\r\n                enterFrom=\"opacity-0 scale-95\"\r\n                enterTo=\"opacity-100 scale-100\"\r\n                leave=\"transition ease-in duration-75 transform\"\r\n                leaveFrom=\"opacity-100 scale-100\"\r\n                leaveTo=\"opacity-0 scale-95\">\r\n                <div className=\"fixed z-10 inset-0 overflow-y-auto\">\r\n                    <div\r\n                        className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n                        <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                            <div className=\"absolute inset-0 bg-gray-500 opacity-75\">\r\n\r\n                            </div>\r\n                        </div>\r\n                        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"\r\n                              aria-hidden=\"true\">&#8203;</span>\r\n                        <div\r\n                            className=\"p-10 inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\"\r\n                            role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n                            <UpdateClientForm values={values} openModal={openModal} setOpenModal={setOpenModal}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Transition>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport Button from \"../Button\";\r\nimport no_ava from \"../../img/person-icon.png\"\r\nimport UpdateModalWrapper from \"./UpdateModalWrapper\";\r\n\r\nexport default function TableItem ({data}:any) {\r\n    const [openModal, setOpenModal] = useState(false)\r\n    return (\r\n        <tr className=\"content-between\">\r\n            <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                <div className=\"flex items-center\">\r\n                    <div className=\"flex-shrink-0 h-10 w-10\">\r\n                        <img className=\"h-10 w-10 rounded-full\" alt={data.lastName}\r\n                             src={data.avatarUrl ?  data.avatarUrl : no_ava }/>\r\n                    </div>\r\n                    <div className=\"ml-6\">\r\n                        <div className=\"text-sm font-medium text-gray-900\">\r\n                            {data.firstName} {data.lastName}\r\n                        </div>\r\n                        <div className=\"text-sm text-gray-500\">\r\n                            {data.phone}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </td>\r\n            <td className=\"pl-40 pr-10\">\r\n                <UpdateModalWrapper values={data} openModal={openModal} setOpenModal={setOpenModal}/>\r\n                <Button text=\"edit\" color=\"bg-green-500\" onClick={() => setOpenModal(!openModal)}/>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableItem from \"./TableItem\";\r\nimport request, {gql} from \"graphql-request\";\r\nimport {useQuery} from \"react-query\";\r\nimport {endpoint} from \"../../index\";\r\n\r\n\r\nconst GET_CLIENT = gql`\r\n    query {\r\n        getClients{\r\n            id\r\n            firstName\r\n            lastName\r\n            phone\r\n            avatarUrl\r\n        }\r\n    }`\r\n\r\nfunction useClients() {\r\n    return useQuery(\"g\", async () => {\r\n        const data = await request(\r\n            endpoint, GET_CLIENT)\r\n        return data.getClients;\r\n    })\r\n}\r\n\r\nexport default function TableWrapper () {\r\n\r\n    const { status, data} = useClients()\r\n\r\n    return (\r\n        <div>\r\n            {status === \"loading\" ? (\r\n                \"Loading...\"\r\n            ) : status === \"error\" ? (\r\n                \"Error\"\r\n            ) : (\r\n            <div className=\"mx-auto\">\r\n                <div className=\"flex flex-col\">\r\n                    <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\r\n                        <div className=\"py-2 align-middle inline-block  sm:px-6 lg:px-8\">\r\n                            <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\r\n                                <table className=\"divide-y divide-gray-200\">\r\n                                    <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                                    {data.map((item: any) => <TableItem key={item.id} data={item}/>)}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>)}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Button from \"../Button\";\r\nimport {ModalProps} from \"./ModalWrapper\";\r\nimport request, {gql} from \"graphql-request\";\r\nimport {useQuery, useQueryClient} from \"react-query\";\r\nimport {endpoint} from \"../../index\"\r\n\r\ntype Inputs = {\r\n    firstName: string,\r\n    lastName: string,\r\n    phone?: string,\r\n    avatarUrl?: string,\r\n};\r\n\r\nfunction useAddClient(inputs: any) {\r\n    return ( async () => {\r\n        const {data} = await request(\r\n            endpoint, gql\r\n                `mutation {\r\n                    addClient(\r\n                        firstName: \"${inputs.firstName}\"\r\n                        lastName: \"${inputs.lastName}\"\r\n                        phone: \"${inputs.phone}\"\r\n                        avatarUrl: \"${inputs.avatarUrl}\"\r\n                    ){\r\n                        id\r\n                        firstName\r\n                    }\r\n                }`)\r\n        return data\r\n        }\r\n    )\r\n}\r\n\r\nexport default function AddClientForm({openModal, setOpenModal}: ModalProps) {\r\n    const { register, handleSubmit, errors } = useForm<Inputs>();\r\n    const [inputs, setInputs] = useState({})\r\n    const { refetch } = useQuery([\"addClient\", inputs], useAddClient(inputs), {\r\n        refetchOnWindowFocus: false,\r\n        enabled: false\r\n    })\r\n    const client = useQueryClient()\r\n    const onSubmit = (input: React.FormEvent) => {\r\n        setInputs(input)\r\n        setOpenModal(!openModal)\r\n        refetch().then(() => client.invalidateQueries(\"g\"))\r\n    }\r\n\r\n    return (\r\n        <form className=\"flex flex-col\" onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <span>First name:</span>\r\n            <input className=\"border-2\" name=\"firstName\" ref={register({ required: true })} />\r\n\r\n            <span>Last name:</span>\r\n            <input className=\"border-2\" name=\"lastName\" ref={register({ required: true })} />\r\n\r\n            <span>Phone:</span>\r\n            <input className=\"border-2\" name=\"phone\" ref={register} />\r\n\r\n            <span>Image url:</span>\r\n            <input className=\"border-2\" name=\"avatarUrl\" ref={register} />\r\n\r\n            {errors.firstName && <span>Field 'First name' is required</span>}\r\n            {errors.lastName && <span>Field 'Last name' is required</span>}\r\n\r\n            <div className=\"flex flex-wrap content-between\">\r\n                <Button type=\"submit\" text=\"Add\" color=\"bg-blue-500\"/>\r\n                <Button type=\"button\" text=\"Cancel\" color=\"bg-red-500\" onClick={() => setOpenModal(!openModal)}/>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n","import React, {Dispatch, SetStateAction} from 'react'\r\nimport {Transition} from '@headlessui/react'\r\nimport AddClientForm from \"./AddClientForm\";\r\n\r\n\r\nexport interface ModalProps {\r\n    openModal: boolean;\r\n    setOpenModal: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\n\r\nexport default function ModalWrapper({openModal, setOpenModal}: ModalProps) {\r\n    return (\r\n        <div className=\"relative ...\">\r\n            <Transition\r\n                show={openModal}\r\n                enter=\"transition ease-out duration-100 transform\"\r\n                enterFrom=\"opacity-0 scale-95\"\r\n                enterTo=\"opacity-100 scale-100\"\r\n                leave=\"transition ease-in duration-75 transform\"\r\n                leaveFrom=\"opacity-100 scale-100\"\r\n                leaveTo=\"opacity-0 scale-95\">\r\n                <div className=\"fixed z-10 inset-0 overflow-y-auto\">\r\n                    <div\r\n                        className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n                        <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                            <div className=\"absolute inset-0 bg-gray-500 opacity-75\">\r\n                            </div>\r\n                        </div>\r\n                        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"\r\n                              aria-hidden=\"true\">&#8203;</span>\r\n                        <div\r\n                            className=\"p-10 inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\"\r\n                            role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n                            <AddClientForm openModal={openModal} setOpenModal={setOpenModal}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Transition>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport ModalWrapper from \"./ModalWrapper\";\r\nimport Button from \"../Button\";\r\n\r\n\r\nconst AddClientWrapper = () => {\r\n    const [openModal, setOpenModal] = useState(false)\r\n\r\n    return (\r\n            <div>\r\n                <ModalWrapper openModal={openModal} setOpenModal={setOpenModal}/>\r\n                <Button text=\"Add client\" color=\"bg-blue-500\" onClick={() => setOpenModal(!openModal)}/>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default AddClientWrapper;\r\n","import React from 'react';\nimport TableWrapper from \"./Table/TableWrapper\";\nimport AddClientWrapper from \"./AddClient/AddClientWrapper\";\n\n\n\nconst App: React.FC = () => {\n\n    return (\n        <div>\n            <div className=\"container mx-auto my-10\">\n                <AddClientWrapper/>\n                <TableWrapper />\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n    QueryClient,\n    QueryClientProvider,\n} from \"react-query\";\n\nexport const endpoint = \"https://test-task.expane.pro/api/graphql\"\n\nconst client = new QueryClient()\n\nReactDOM.render(<QueryClientProvider client={client}>\n                    <App />\n                </QueryClientProvider>,  document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}